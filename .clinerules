# 本プロジェクトの目的
## プロジェクトゴール

- ユーザーはアークナイツのwikiにある情報を収集し、RAGを活用して一般的な情報を踏まえつつも最新の情報を含めた回答ができるようになるシステムの作成をしようとしています

- 私はそのためにただ動くだけではなく、後々メンテナスしやすいことや、RAGを使ったことによる評価がしやすいシステム

## 制約事項

- openai等のAPIを使う場合、コストには気をつけます。必要に応じてユーザに確認をしながら進めます。

# プロジェクト内で使う技術的なTips

## Pythonのバージョンやパッケージの管理

- uv(https://docs.astral.sh/uv/) を用いる
- uvの使い方
  - 初期化 `uv init`
  - Pythonのインストール `uv python install 3.xx.xx`
    - Pythonのバージョンは以下ページでbugfixフェーズの最新のものを使う
      - https://devguide.python.org/versions/
  - Pythonバージョンの固定 `uv python pin 3.xx.xx` => .python-version ファイルが作成される
  - 仮想環境の作成 `uv venv`
  - パッケージの追加 `uv add package_name`
  - 作成したプログラムの実行 `uv run python xxx.py`
- パッケージなどの情報はrequirements.txtでなく、pyproject.tomlに書かれます。

## 関数の書き方

- 私は以下を心がけます
  - ユーザはテストにおいてはいわゆる古典学派なのでできるだけ純粋関数になるようなことを考えて実装してください
  - 外部への依存性はまとめてください
  - いわゆるクリーンアーキテクチャやオニオンアーキテクチャが理想形ではありますが、実装がそこまで大きくないので、それを意識した程度のアーキテクチャになるようにします

- 型は必ず書いてください

- docstringは必ず書いてください。なお、google-styleでお願いします。

## テスト

### テストの書き方

- 純粋関数に対する単体テストは必ず書いてください。リポジトリ系については単体テストの必要はあまりないと考えています。
- メインロジックに対するテストは必ず書きます。リポジトリ系の関数はMockしてMockされた状態で純粋関数的に振る舞うようにしてください。

### カバレッジ

- 上記の通りなので絶対的な目標は定めませんが、概ね80%前後を目標としてください。


## 記憶量とデータの読み方

私の記憶領域は有限であり、巨大なファイルを読み込まないようにする必要があります。

`*.json` や `*.jsonl`, `*.html` を read-file する前には、`ls -al <file>` でファイルサイズを確認してください。

また、大きなファイルを読み込む必要がどうしてもある場合は、サマライズする方法を考えたうえでユーザに提案してください。
例) htmlを読み込みたいが大きいので、BeautifulSoupでbodyタグないの日本語のみを抽出したうえで読み込む
